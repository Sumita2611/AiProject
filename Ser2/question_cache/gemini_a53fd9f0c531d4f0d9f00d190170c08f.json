{"title": "Flipping Bits to Maximize Even Numbers", "difficulty": "Easy", "description": "Given a non-negative integer `n`, you can flip at most one bit (0 to 1 or 1 to 0) in its binary representation.  Find the maximum number of even numbers that can be created by selecting a subset of the bits (including the empty subset) from the modified binary number, interpreting the subset as a decimal value.", "examples": [{"input": "5 (binary 101)", "output": "4", "explanation": "Flipping the least significant bit gives 4 (binary 100). Subsets are {}, {0}, {00}, which are 0, 0, 0. Flipping the second bit gives 7 (binary 111). Subsets of 7 are {}, {1}, {11}, {111}, leading to 0, 1, 3, 7. Only 0 is even. Thus flipping the first bit gives 6 (110). Subsets are {}, {0}, {2}, {6}.  4 even numbers."}, {"input": "3 (binary 011)", "output": "4", "explanation": "Flipping the least significant bit to 0 gives 2 (binary 010). Subsets are {}, {0}, {2}, which are 0, 0, 2.  Flipping the second bit gives 1 (binary 001). Subsets are {}, {1}, which are 0, 1. Flipping the most significant bit to 1 gives 7 (binary 111).  Subsets are {}, {1}, {3}, {7}.  Only 0 is even. Thus flipping the first bit gives 7, flipping the second bit gives 1, flipping the third bit gives 2. Among those 0, 2 lead to 4 even numbers.\n\nConstraints:\n- 0 <= n <= 1023 (This limits the input to integers representable with 10 bits)\n- You can assume that the solution will always be found by flipping at most one bit.\n- Time complexity should be O(log n).  Space complexity should be O(1)."}], "constraints": ["- 0 <= n <= 1023 (This limits the input to integers representable with 10 bits)", "- You can assume that the solution will always be found by flipping at most one bit.", "- Time complexity should be O(log n).  Space complexity should be O(1)."], "function_signature": {"java": "public int maxEvenSubsets(int n) { // Your code here }", "cpp": "int maxEvenSubsets(int n) { // Your code here }", "python": "def max_even_subsets(n): # Your code here\n    pass"}, "id": "a53fd9f0c531d4f0d9f00d190170c08f", "category": "bit manipulation"}