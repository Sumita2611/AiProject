{"title": "Recursive Digit Summation with Alternating Signs", "difficulty": "Easy", "description": "Write a recursive function `alternatingSum(n)` that calculates the alternating sum of the digits of a non-negative integer `n`.  The alternating sum means that digits are added and subtracted alternately, starting with addition.  For example, the alternating sum of 1234 is 1 - 2 + 3 - 4 = -2.  If the input is a single-digit number, return the number itself.", "examples": [{"input": "1234", "output": "-2", "explanation": "1 - 2 + 3 - 4 = -2"}, {"input": "98765", "output": "1", "explanation": "9 - 8 + 7 - 6 + 5 = 7"}, {"input": "5", "output": "5", "explanation": "The number is a single digit, so it's returned directly."}, {"input": "0", "output": "0", "explanation": "The alternating sum of 0 is 0.\n\n\nConstraints:\n- n is a non-negative integer.\n- No specific time/space complexity requirements for easy level.  A simple recursive solution is sufficient."}], "constraints": ["- n is a non-negative integer.", "- No specific time/space complexity requirements for easy level.  A simple recursive solution is sufficient."], "function_signature": {"java": "public int alternatingSum(int n) { // Your code here }", "cpp": "int alternatingSum(int n) { // Your code here }", "python": "def alternating_sum(n): # Your code here\n    pass"}, "id": "85bbf9698979862cb4e7cd07e5996474", "category": "recursion"}